# -*- coding: utf-8 -*-
"""hypoth_testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qAVSNnKyOVW3ef0qZi3wo_ZdEnsQu56N

Q. A factory has a machine that dispenses 80.17 mL of fluid into a bottle. An employee believes that the average amount of fluid isnâ€™t 80.17 mL Using 32 samples, he measures the average amount dispensed by the machine to be **(Smean)**mL with a sample standard deviation of **(Ssd)**mL.
At a **X% (user input)** confidence level, is there enough evidence to support the idea that the machine is not working properly?

```
X : confidence
Smean : Sample space mean
Ssd : Sample space std deviation
```

**1. Imports**
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
import statistics
from pandas import *
import random
import math
import csv

"""**2. Reading Data from CSV**"""

file = open("liquid.csv","r")
data = list(csv.reader(file, delimiter=","))
file.close()

finaldata = []
for x in data:
  finaldata.append(float(x[0]))
finaldata.sort()
print("Population Data : \n\n",finaldata)

"""**3. Finding Mean and Std Deviation of Population**"""

mean = round(statistics.mean(finaldata),2)
sd = round(statistics.stdev(finaldata),2)

print("Population mean : ",mean,"\nPouplation Std deviation : ",sd)
Xaxis = finaldata
Yaxis = norm.pdf(finaldata, mean, sd)

print('\033[93m' + "\033[1m" + "\nNull Hypothesis : mu = " + str(mean) + "\033[0m")
print('\033[93m' + "\033[1m" + "Alternate Hypothesis : mu != " + str(mean) + "\033[0m")

print("\nDistribution of population data : \n")
plt.plot(Xaxis, Yaxis)
plt.show()

"""**4. Generating Sample Space**"""

sample = random.sample(finaldata,40)
print("Sample Data : \n\n",sample)

Smean = statistics.mean(sample)
Ssd = statistics.stdev(sample)

print("\nSample mean : ",Smean,"\nSample std dev : ",Ssd)
SZval = (Smean - mean)/(Ssd/math.sqrt(32))
SZval = round(SZval,2)
print("\nSample Z value : ", SZval,"\n")

"""**5. Showing Acceptance and Rejection regions for Null Hypothesis**"""

confidence = int(input("Enter confidence level (X%) : "))
significance = float("{:.2f}".format((1 - (confidence)/100)))
print("\nSignificance level (alpha) : ",significance)
print("alpha/2 : ",significance/2)

Zval = norm.ppf(float("{:.4f}".format(significance/2)))
Zval = round(Zval,2)
print("Z value is : ",Zval,",",-1*Zval,"\n")

normx_temp = np.arange(-3.99,4.00,0.01)
normx = np.round(normx_temp, 2).tolist()
normy = norm.pdf(normx,0,1)

print("\nNormal distribution of confidence level",confidence,"% :\n")
plt.plot(normx, normy)
plt.scatter(Zval, [0], color="blue",alpha=0.6)
plt.text(Zval- 0.2,-0.017,Zval)
plt.scatter(-1*Zval, [0], color="blue",alpha=0.6)
plt.text(-1*Zval - 0.2,-0.017,-1*Zval)
plt.fill_between(
        x= normx, 
        y1= normy, 
        where= (normx < Zval)|(normx > -1*Zval),
        color= "b",
        alpha= 0.2)

plt.show()

print("\n")
SZcolor = ""
if(SZval < Zval or SZval > -1*Zval):
  result = '\033[91m' + "** The Null Hypothesis is Rejected **"
  SZcolor = "red"
else:
  result = '\033[92m' + "** The Null Hypothesis is Accepted **"
  SZcolor = "green"

print("\033[1m" + result + "\033[0m")
print("\n")

plt.plot(normx, normy)
plt.scatter(SZval, [0], color=SZcolor)
plt.text(SZval- 0.3,0.01,SZval)
plt.scatter(Zval, [0], color="blue",alpha=0.6)
plt.text(Zval- 0.3,-0.017,Zval)
plt.scatter(-1*Zval, [0], color="blue",alpha=0.6)
plt.text(-1*Zval - 0.3,-0.017,-1*Zval)
plt.fill_between(
        x= normx, 
        y1= normy, 
        where= (normx < Zval)|(normx > -1*Zval),
        color= "b",
        alpha= 0.2)

plt.show()

"""**References**

1. https://www.geeksforgeeks.org/how-to-plot-a-normal-distribution-with-matplotlib-in-python/
2. https://www.statology.org/normal-distribution-dataset-generator/
3. https://matplotlib.org/3.5.1/api/_as_gen/matplotlib.pyplot.fill_between.html
4. https://www.geeksforgeeks.org/python-random-sample-function/
5. https://www.geeksforgeeks.org/how-to-find-the-z-critical-value-in-python/
6. https://www.skytowner.com/explore/drawing_a_single_point_in_matplotlib
7. https://www.geeksforgeeks.org/how-to-annotate-matplotlib-scatter-plots/
"""